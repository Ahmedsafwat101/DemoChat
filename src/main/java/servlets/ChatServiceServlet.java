package servlets;

import database.DatabaseConnection;
import entites.Message;
import entites.User;
import jakarta.servlet.ServletConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Objects;


@WebServlet(name = "chatService", urlPatterns = {"/chatService"})
public class ChatServiceServlet extends HttpServlet {
    // Database Object
    Connection con = null;

    HashMap<String, ArrayList<Message>> rooms = new HashMap<>();


    @Override
    public void init(ServletConfig config) throws ServletException {
        super.init(config);
        // Setup Database Connection
        try {
            con = DatabaseConnection.getInstance();
        } catch (ClassNotFoundException | SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        ResultSet queryResult;

        String roomId = request.getParameter("rId");

        if(roomId != null) {

            response.setContentType("text/plain");  // Set content type of the response so that jQuery knows what it can expect.
            response.setCharacterEncoding("UTF-8"); // You want world domination, huh?

            try {
                queryResult = getAllMessagesForRoom(Integer.parseInt(roomId));
                while (queryResult.next()) {
                    System.out.println(queryResult.getInt(1)); // id
                    System.out.println(queryResult.getInt(2)); //roomId
                    System.out.println(queryResult.getInt(3)); // userID

                    response.getWriter().println(queryResult.getTimestamp(6)); // TimeStamp
                    response.getWriter().println(queryResult.getString(4));//userName
                    response.getWriter().println(queryResult.getString(5)); //Message
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }


    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {

        String roomId = req.getParameter("rId");
        String userId = req.getParameter("UId");
        String userName = req.getParameter("UName");
        String message = req.getParameter("UMsg");


        // Create Message Object
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");
        LocalDateTime localDateTime = LocalDateTime.now();
        User currUser = new User(userName, userId);
        Message currMessage = new Message(message, localDateTime.format(dtf), currUser);

        //Save Message Object into HashMap
        /*
        rooms.putIfAbsent(roomId, new ArrayList<>());
        rooms.get(roomId).add(currMessage);
        */

        try {
            insertRow(req);
        } catch (SQLException e) {
            e.printStackTrace();
        }

        resp.getWriter().println("<h1>" + message + " Send Successfully" + "</h1>");
        resp.setStatus(200);
    }

    @Override
    public void destroy() {
        super.destroy();


        try {
            con.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void insertRow(HttpServletRequest req) throws SQLException {

        PreparedStatement preparedStatement = con.prepareStatement("insert into messages (room_id, user_id, user_name, message,msg_date)"
                + " values (?, ?, ?, ?, ?)");

        //int autoGeneratedID = tableKeys.getInt(1);
        preparedStatement.setInt(1, Integer.parseInt(req.getParameter("rId")));
        preparedStatement.setInt(2, Integer.parseInt(req.getParameter("UId")));
        preparedStatement.setString(3, req.getParameter("UName"));
        preparedStatement.setString(4, req.getParameter("UMsg"));
        preparedStatement.setTimestamp(5, new java.sql.Timestamp(new java.util.Date().getTime()));

        preparedStatement.execute();

        //getAllMessagesForRoom(1);
    }

    private ResultSet getAllMessagesForRoom(int roomID) throws SQLException {
        String query = String.format("SELECT * From messages where room_id = %s", roomID);
        PreparedStatement preparedStatement = con.prepareStatement(query);
        return preparedStatement.executeQuery();

    }
}


